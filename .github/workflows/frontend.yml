name: ‚ú® Build & Deploy Windy Frontend *

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - main

jobs:
  build:
    name: üõ†Ô∏è Lint + Minify
    runs-on: ubuntu-latest

    steps:
      - name: üìÖ Checkout code
        uses: actions/checkout@v3

      - name: üöÄ Set up Python (for AWS CLI)
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: üì¶ Install Tools (AWS CLI + Minifiers)
        run: |
          pip install awscli
          npm install -g html-minifier terser clean-css-cli

      - name: üßº Lint and Minify Assets
        run: |
          echo "üîß Minifying HTML, CSS, JS..."
          find . -name "*.html" -exec html-minifier \
            --collapse-whitespace \
            --remove-comments \
            --minify-css true \
            --minify-js true \
            -o {} {} \;
          find . -name "*.css" -exec cleancss -o {} {} \;
          find . -name "*.js" -exec terser --compress --mangle -o {} -- {} \;

  deploy:
    name: üöÄ Deploy to S3 (Only on main)
    needs: build
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - name: üìÖ Checkout code
        uses: actions/checkout@v3

      - name: üß∞ Install AWS CLI
        run: pip install awscli

      - name: üì§ Sync to S3 Bucket
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          S3_BUCKET: ${{ secrets.S3_BUCKET }}
        run: |
          echo "üåê Deploying to S3: $S3_BUCKET"
          aws s3 sync ./ s3://$S3_BUCKET \
            --region "$AWS_REGION" \
            --delete \
            --cache-control "max-age=31536000" \
            --exclude ".git/*" \
            --exclude ".github/*" \
            --exclude "tests/*" || exit 1

      - name: üì¢ Notify via SNS ‚Äì ‚úÖ Success
        if: success() && env.SNS_TOPIC_ARN != ''
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          SNS_TOPIC_ARN: ${{ secrets.SNS_TOPIC_ARN }}
        run: |
          COMMIT=$(git rev-parse --short HEAD)
          BRANCH=$(git rev-parse --abbrev-ref HEAD)
          aws sns publish \
            --topic-arn "$SNS_TOPIC_ARN" \
            --region "$AWS_REGION" \
            --message "‚úÖ Frontend deployed successfully üöÄ
            Branch: $BRANCH
            Commit: $COMMIT"

      - name: üì¢ Notify via SNS ‚Äì ‚ùå Failure
        if: failure() && env.SNS_TOPIC_ARN != ''
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          SNS_TOPIC_ARN: ${{ secrets.SNS_TOPIC_ARN }}
        run: |
          COMMIT=$(git rev-parse --short HEAD)
          BRANCH=$(git rev-parse --abbrev-ref HEAD)
          aws sns publish \
            --topic-arn "$SNS_TOPIC_ARN" \
            --region "$AWS_REGION" \
            --message "‚ùå Frontend deployment FAILED ‚ùó
            Branch: $BRANCH
            Commit: $COMMIT
            Check logs for details."
